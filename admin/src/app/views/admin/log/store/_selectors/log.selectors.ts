/* ----- Autogenerated by Django! Author: Zharikov Dimitry zdimon77@gmail.com --- */
// NGRX
import { createFeatureSelector, createSelector } from '@ngrx/store';
// Lodash
import { each } from 'lodash';
// CRUD
import { QueryResultsModel, HttpExtenstionsModel } from '@core/_base/crud';
// State
import { LogsState } from '../_reducers/log.reducers';
import { LogModel } from '../_models/log.model';

export const selectLogsState = createFeatureSelector<LogsState>('log');

export const selectLogById = (logId: number) => createSelector(
    selectLogsState,
    logsState => logsState.entities[logId]
);

export const selectLogsPageLoading = createSelector(
    selectLogsState,
    logsState => logsState.listLoading
);

export const selectLogsActionLoading = createSelector(
    selectLogsState,
    customersState => customersState.actionsloading
);

export const selectLogsPageLastQuery = createSelector(
    selectLogsState,
    logsState => logsState.lastQuery
);

export const selectLastCreatedLogId = createSelector(
    selectLogsState,
    logsState => logsState.lastCreatedLogId
);

export const selectLogsInitWaitingMessage = createSelector(
    selectLogsState,
    logsState => logsState.showInitWaitingMessage
);

export const selectLogsInStore = createSelector(
    selectLogsState,
    logState => {
        const items: LogModel[] = [];
        each(logState.entities, element => {
            items.push(element);
        });
        const httpExtension = new HttpExtenstionsModel();
        const result: LogModel[] = httpExtension.sortArray(items, logState.lastQuery.sortField, logState.lastQuery.sortOrder);
        return new QueryResultsModel(result, logState.totalCount, '');
    }
);

export const selectHasLogsInStore = createSelector(
    selectLogsInStore,
    queryResult => {
        if (!queryResult.totalCount) {
            return false;
        }

        return true;
    }
);
