/* ----- Autogenerated by Django! Author: Zharikov Dimitry zdimon77@gmail.com --- */
// Angular
import { Injectable } from '@angular/core';
// RxJS
import { of } from 'rxjs';
import { mergeMap, map, catchError, tap } from 'rxjs/operators';
// NGRX
import { Effect, Actions, ofType } from '@ngrx/effects';
import { Store } from '@ngrx/store';
// CRUD
import { QueryResultsModel } from '../../../../../core/_base/crud';
// Services
import { UserMediaService } from '../_services/user-media-list.tab.services';
// State
import { AppState } from '../../../../../core/reducers';
// Actions
import {
    UserMediaActionTypes,
    UserMediaPageRequested,
    UserMediaPageLoaded,
    ManyUserMediaDeleted,
    OneUserMediaDeleted,
    UserMediaPageToggleLoading,
    UserMediaUpdated,
    UserMediaCreated,
    UserMediaOnServerCreated
} from '../_actions/user-media-list.tab.actions';

@Injectable()
export class UserMediaEffects {
    // showLoadingDistpatcher = new ProcutSpecificationsPageToggleLoading({ isLoading: true });
    hideLoadingDistpatcher = new UserMediaPageToggleLoading({ isLoading: false });

    @Effect()
    loadUserMediaPage$ = this.actions$
        .pipe(
            ofType<UserMediaPageRequested>(UserMediaActionTypes.UserMediaPageRequested),
            mergeMap(( { payload } ) => this.UserMediaService.findUserMedia(payload.page, payload.UserMediaId)),
            map((result: QueryResultsModel) => {
                return new UserMediaPageLoaded({
                    results: result.results,
                    totalCount: result.totalCount
                });
            }),
        );

    @Effect()
    deleteUserMedia$ = this.actions$
        .pipe(
            ofType<OneUserMediaDeleted>(UserMediaActionTypes.OneUserMediaDeleted),
            mergeMap(( { payload } ) => {
                    this.store.dispatch(new UserMediaPageToggleLoading({ isLoading: true }));
                    return this.UserMediaService.deleteUserMedia(payload.id);
                }
            ),
            map(() => {
                return this.hideLoadingDistpatcher;
            }),
        );

    @Effect()
    deleteUserMediaMany$ = this.actions$
        .pipe(
            ofType<ManyUserMediaDeleted>(UserMediaActionTypes.ManyUserMediaDeleted),
            mergeMap(( { payload } ) => {
                    this.store.dispatch(new UserMediaPageToggleLoading({ isLoading: true }));
                    return this.UserMediaService.deleteManyUserMedia(payload.ids);
                }
            ),
            map(() => {
                return this.hideLoadingDistpatcher;
            }),
        );

    @Effect()
    updateUserMedia$ = this.actions$
        .pipe(
            ofType<UserMediaUpdated>(UserMediaActionTypes.UserMediaUpdated),
            mergeMap(( { payload } ) => {
                this.store.dispatch(new UserMediaPageToggleLoading({ isLoading: true }));
                return this.UserMediaService.updateUserMedia(payload.UserMedia);
            }),
            map(() => {
                return this.hideLoadingDistpatcher;
            }),
        );

    @Effect()
    createUserMedia$ = this.actions$
        .pipe(
            ofType<UserMediaOnServerCreated>(UserMediaActionTypes.UserMediaOnServerCreated),
            mergeMap(( { payload } ) => {
                this.store.dispatch(new UserMediaPageToggleLoading({ isLoading: true }));
                return this.UserMediaService.createUserMedia(payload.UserMedia).pipe(
                    tap((res: any) => {
                        this.store.dispatch(new UserMediaCreated({ UserMedia: res }));
                    })
                );
            }),
            map(() => {
                return this.hideLoadingDistpatcher;
            }),
        );

    constructor(private actions$: Actions, private UserMediaService: UserMediaService, private store: Store<AppState>) { }
}
