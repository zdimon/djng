/* ----- Autogenerated by Django! Author: Zharikov Dimitry zdimon77@gmail.com --- */
// NGRX
import { createFeatureSelector } from '@ngrx/store';
import { EntityState, EntityAdapter, createEntityAdapter, Update } from '@ngrx/entity';
// Actions
import { UserMediaActions, UserMediaActionTypes } from '../_actions/user-media-list.tab.actions';
// Models
import { UserMediaModel } from '../_models/user-media-list.tab.model';
import { QueryParamsModel } from '@core/_base/crud';

export interface UserMediaState extends EntityState<UserMediaModel> {
    results: any;
    UserMediaId: number;
    loading: boolean;
    totalCount: number;
    lastCreatedUserMediaId: number;
    lastQuery: QueryParamsModel;
    showInitWaitingMessage: boolean;
}

export const adapter: EntityAdapter<UserMediaModel> = createEntityAdapter<UserMediaModel>();

export const initialUserMediaState: UserMediaState = adapter.getInitialState({
    loading: false,
    results: [],
    totalCount: 0,
    UserMediaId: undefined,
    lastCreatedUserMediaId: undefined,
    lastQuery: new QueryParamsModel({}),
    showInitWaitingMessage: true
});

export function UserMediaReducer(state = initialUserMediaState, action: UserMediaActions): UserMediaState {
    switch  (action.type) {
        case UserMediaActionTypes.UserMediaPageToggleLoading:
            return {
                ...state,
                loading: action.payload.isLoading,
                lastCreatedUserMediaId: undefined
            };
        case UserMediaActionTypes.UserMediaOnServerCreated:
            return {...state, loading: true};
        case UserMediaActionTypes.UserMediaCreated:
            return adapter.addOne(action.payload.UserMedia, {
                ...state,
                lastCreatedUserMediaId: action.payload.UserMedia.id
            });
        case UserMediaActionTypes.UserMediaUpdated:
            return adapter.updateOne(action.payload.partialUserMedia, state);
        case UserMediaActionTypes.OneUserMediaDeleted:
            return adapter.removeOne(action.payload.id, state);
        case UserMediaActionTypes.ManyUserMediaDeleted:
            return adapter.removeMany(action.payload.ids, state);
        case UserMediaActionTypes.UserMediaPageCancelled:
            return { ...state, totalCount: 0, loading: false, UserMediaId: undefined, lastQuery: new QueryParamsModel({})  };
        case UserMediaActionTypes.UserMediaPageRequested:
            return { ...state, totalCount: 0, loading: true, UserMediaId: action.payload.UserMediaId, lastQuery: action.payload.page };
        case UserMediaActionTypes.UserMediaPageLoaded:
            return adapter.addMany(action.payload.results, {
                ...initialUserMediaState,
                totalCount: action.payload.totalCount,
                loading: false,
                UserMediaId: state.UserMediaId,
                lastQuery: state.lastQuery,
                showInitWaitingMessage: false
            });
        default:
            return state;
    }
}

export const getUserMediaRemarlState = createFeatureSelector<UserMediaModel>('UserMedia');

export const {
    selectAll,
    selectEntities,
    selectIds,
    selectTotal
} = adapter.getSelectors();
