/* ----- Autogenerated by Django! Author: Zharikov Dimitry zdimon77@gmail.com --- */
// NGRX
// CRUD
import { Update } from '@ngrx/entity';
import { Action } from '@ngrx/store';
import { QueryParamsModel } from '../../../../../core/_base/crud';
// Models
import { UserGroupModel } from '../_models/user-group-list.tab.model';

export enum UserGroupActionTypes {
    UserGroupOnServerCreated = '[Edit UserGroup Dialog] UserGroup On Server Created',
    UserGroupCreated = '[Edit UserGroup Dialog] UserGroup Created',
    UserGroupUpdated = '[Edit UserGroup Dialog] UserGroup Updated',
    OneUserGroupDeleted = '[UserGroup List Page]  One UserGroup Deleted',
    ManyUserGroupDeleted = '[UserGroup List Page] Many UserGroup Deleted',
    UserGroupPageRequested = '[UserGroup List Page] Page Requested',
    UserGroupPageLoaded = '[UserGroup API] Page Loaded',
    UserGroupPageCancelled = '[UserGroup API] Page Cancelled',
    UserGroupPageToggleLoading = '[UserGroup] UserGroup Page Toggle Loading'
}

export class UserGroupOnServerCreated implements Action {
    readonly type = UserGroupActionTypes.UserGroupOnServerCreated;
    constructor(public payload: { UserGroup: UserGroupModel }) { }
}

export class UserGroupCreated implements Action {
    readonly type = UserGroupActionTypes.UserGroupCreated;
    constructor(public payload: { UserGroup: UserGroupModel }) { }
}

export class UserGroupUpdated implements Action {
    readonly type = UserGroupActionTypes.UserGroupUpdated;
    constructor(public payload: {
        partialUserGroup: Update<UserGroupModel>, // For State update
        UserGroup: UserGroupModel,  // For Server update (through service)
    }) { }
}

export class OneUserGroupDeleted implements Action {
    readonly type = UserGroupActionTypes.OneUserGroupDeleted;
    constructor(public payload: { id: number }) {}
}

export class ManyUserGroupDeleted implements Action {
    readonly type = UserGroupActionTypes.ManyUserGroupDeleted;
    constructor(public payload: { ids: number[] }) {}
}

export class UserGroupPageRequested implements Action {
    readonly type = UserGroupActionTypes.UserGroupPageRequested;
    constructor(public payload: { page: QueryParamsModel, UserGroupId: number }) { }
}

export class UserGroupPageLoaded implements Action {
    readonly type = UserGroupActionTypes.UserGroupPageLoaded;
    constructor(public payload: { results: UserGroupModel[], totalCount: number }) { }
}

export class UserGroupPageCancelled implements Action {
    readonly type = UserGroupActionTypes.UserGroupPageCancelled;
}

export class UserGroupPageToggleLoading implements Action {
    readonly type = UserGroupActionTypes.UserGroupPageToggleLoading;
    constructor(public payload: { isLoading: boolean }) { }
}

export type UserGroupActions = UserGroupOnServerCreated
| UserGroupCreated
| UserGroupUpdated
| OneUserGroupDeleted
| ManyUserGroupDeleted
| UserGroupPageRequested
| UserGroupPageLoaded
| UserGroupPageCancelled
| UserGroupPageToggleLoading;

