/* ----- Autogenerated by Django! Author: Zharikov Dimitry zdimon77@gmail.com --- */
// NGRX
// CRUD
import { Update } from '@ngrx/entity';
import { Action } from '@ngrx/store';
import { QueryParamsModel } from '../../../../../core/_base/crud';
// Models
import { UserMediaModel } from '../_models/user-media-list.tab.model';

export enum UserMediaActionTypes {
    UserMediaOnServerCreated = '[Edit UserMedia Dialog] UserMedia On Server Created',
    UserMediaCreated = '[Edit UserMedia Dialog] UserMedia Created',
    UserMediaUpdated = '[Edit UserMedia Dialog] UserMedia Updated',
    OneUserMediaDeleted = '[UserMedia List Page]  One UserMedia Deleted',
    ManyUserMediaDeleted = '[UserMedia List Page] Many UserMedia Deleted',
    UserMediaPageRequested = '[UserMedia List Page] Page Requested',
    UserMediaPageLoaded = '[UserMedia API] Page Loaded',
    UserMediaPageCancelled = '[UserMedia API] Page Cancelled',
    UserMediaPageToggleLoading = '[UserMedia] UserMedia Page Toggle Loading'
}

export class UserMediaOnServerCreated implements Action {
    readonly type = UserMediaActionTypes.UserMediaOnServerCreated;
    constructor(public payload: { UserMedia: UserMediaModel }) { }
}

export class UserMediaCreated implements Action {
    readonly type = UserMediaActionTypes.UserMediaCreated;
    constructor(public payload: { UserMedia: UserMediaModel }) { }
}

export class UserMediaUpdated implements Action {
    readonly type = UserMediaActionTypes.UserMediaUpdated;
    constructor(public payload: {
        partialUserMedia: Update<UserMediaModel>, // For State update
        UserMedia: UserMediaModel,  // For Server update (through service)
    }) { }
}

export class OneUserMediaDeleted implements Action {
    readonly type = UserMediaActionTypes.OneUserMediaDeleted;
    constructor(public payload: { id: number }) {}
}

export class ManyUserMediaDeleted implements Action {
    readonly type = UserMediaActionTypes.ManyUserMediaDeleted;
    constructor(public payload: { ids: number[] }) {}
}

export class UserMediaPageRequested implements Action {
    readonly type = UserMediaActionTypes.UserMediaPageRequested;
    constructor(public payload: { page: QueryParamsModel, UserMediaId: number }) { }
}

export class UserMediaPageLoaded implements Action {
    readonly type = UserMediaActionTypes.UserMediaPageLoaded;
    constructor(public payload: { results: UserMediaModel[], totalCount: number }) { }
}

export class UserMediaPageCancelled implements Action {
    readonly type = UserMediaActionTypes.UserMediaPageCancelled;
}

export class UserMediaPageToggleLoading implements Action {
    readonly type = UserMediaActionTypes.UserMediaPageToggleLoading;
    constructor(public payload: { isLoading: boolean }) { }
}

export type UserMediaActions = UserMediaOnServerCreated
| UserMediaCreated
| UserMediaUpdated
| OneUserMediaDeleted
| ManyUserMediaDeleted
| UserMediaPageRequested
| UserMediaPageLoaded
| UserMediaPageCancelled
| UserMediaPageToggleLoading;

