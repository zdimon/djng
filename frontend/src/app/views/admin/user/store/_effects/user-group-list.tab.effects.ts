/* ----- Autogenerated by Django! Author: Zharikov Dimitry zdimon77@gmail.com --- */
// Angular
import { Injectable } from '@angular/core';
// RxJS
import { of } from 'rxjs';
import { mergeMap, map, catchError, tap } from 'rxjs/operators';
// NGRX
import { Effect, Actions, ofType } from '@ngrx/effects';
import { Store } from '@ngrx/store';
// CRUD
import { QueryResultsModel } from '../../../../../core/_base/crud';
// Services
import { UserGroupService } from '../_services/user-group-list.tab.services';
// State
import { AppState } from '../../../../../core/reducers';
// Actions
import {
    UserGroupActionTypes,
    UserGroupPageRequested,
    UserGroupPageLoaded,
    ManyUserGroupDeleted,
    OneUserGroupDeleted,
    UserGroupPageToggleLoading,
    UserGroupUpdated,
    UserGroupCreated,
    UserGroupOnServerCreated
} from '../_actions/user-group-list.tab.actions';

@Injectable()
export class UserGroupEffects {
    // showLoadingDistpatcher = new ProcutSpecificationsPageToggleLoading({ isLoading: true });
    hideLoadingDistpatcher = new UserGroupPageToggleLoading({ isLoading: false });

    @Effect()
    loadUserGroupPage$ = this.actions$
        .pipe(
            ofType<UserGroupPageRequested>(UserGroupActionTypes.UserGroupPageRequested),
            mergeMap(( { payload } ) => this.UserGroupService.findUserGroup(payload.page, payload.UserGroupId)),
            map((result: QueryResultsModel) => {
                return new UserGroupPageLoaded({
                    results: result.results,
                    totalCount: result.totalCount
                });
            }),
        );

    @Effect()
    deleteUserGroup$ = this.actions$
        .pipe(
            ofType<OneUserGroupDeleted>(UserGroupActionTypes.OneUserGroupDeleted),
            mergeMap(( { payload } ) => {
                    this.store.dispatch(new UserGroupPageToggleLoading({ isLoading: true }));
                    return this.UserGroupService.deleteUserGroup(payload.id);
                }
            ),
            map(() => {
                return this.hideLoadingDistpatcher;
            }),
        );

    @Effect()
    deleteUserGroupMany$ = this.actions$
        .pipe(
            ofType<ManyUserGroupDeleted>(UserGroupActionTypes.ManyUserGroupDeleted),
            mergeMap(( { payload } ) => {
                    this.store.dispatch(new UserGroupPageToggleLoading({ isLoading: true }));
                    return this.UserGroupService.deleteManyUserGroup(payload.ids);
                }
            ),
            map(() => {
                return this.hideLoadingDistpatcher;
            }),
        );

    @Effect()
    updateUserGroup$ = this.actions$
        .pipe(
            ofType<UserGroupUpdated>(UserGroupActionTypes.UserGroupUpdated),
            mergeMap(( { payload } ) => {
                this.store.dispatch(new UserGroupPageToggleLoading({ isLoading: true }));
                return this.UserGroupService.updateUserGroup(payload.UserGroup);
            }),
            map(() => {
                return this.hideLoadingDistpatcher;
            }),
        );

    @Effect()
    createUserGroup$ = this.actions$
        .pipe(
            ofType<UserGroupOnServerCreated>(UserGroupActionTypes.UserGroupOnServerCreated),
            mergeMap(( { payload } ) => {
                this.store.dispatch(new UserGroupPageToggleLoading({ isLoading: true }));
                return this.UserGroupService.createUserGroup(payload.UserGroup).pipe(
                    tap((res: any) => {
                        this.store.dispatch(new UserGroupCreated({ UserGroup: res }));
                    })
                );
            }),
            map(() => {
                return this.hideLoadingDistpatcher;
            }),
        );

    constructor(private actions$: Actions, private UserGroupService: UserGroupService, private store: Store<AppState>) { }
}
