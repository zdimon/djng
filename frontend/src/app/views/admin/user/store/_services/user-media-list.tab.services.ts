/* ----- Autogenerated by Django! Author: Zharikov Dimitry zdimon77@gmail.com --- */
import { environment } from './../../../../../../environments/environment';
// Angular
import { Injectable } from '@angular/core';
import { HttpClient} from '@angular/common/http';
// RxJS
import { Observable, forkJoin } from 'rxjs';
import { map } from 'rxjs/operators';
// CRUD
import { HttpUtilsService, QueryParamsModel, QueryResultsModel } from '../../../../../core/_base/crud';
// Models and Consts
import { UserMediaModel } from '../_models/user-media-list.tab.model';
// import { SPECIFICATIONS_DICTIONARY } from '../_consts/specification.dictionary';

const API_LIST_URL = environment.apiUrl + '/usermedia/api/tab/list';
const API_CREATE_URL = environment.apiUrl + '/usermedia/api/tab/create';
const API_UPDATE_URL = environment.apiUrl + '/usermedia/api/tab/update';
const API_DELETE_URL = environment.apiUrl + '/usermedia/api/tab/delete';
// Real REST API
@Injectable()
export class UserMediaService {
	constructor(private http: HttpClient, private httpUtils: HttpUtilsService) { }

	// CREATE =>  POST: add a new product specification to the server
	createUserMedia(UserMedia): Observable<UserMediaModel> {
		return this.http.post<UserMediaModel>(API_CREATE_URL, UserMedia);
	}

	// READ
	// Server should return filtered specs by productId
	getAllUserMediaByUserMediaId(UserMediaId: number): Observable<UserMediaModel[]> {
		const url = API_LIST_URL + '/' + UserMediaId;
		return this.http.get<UserMediaModel[]>(url);
	}

	getUserMediaById(UserMediaId: number): Observable<UserMediaModel> {
		return this.http.get<UserMediaModel>(API_LIST_URL + `/${UserMediaId}`);
	}

	// Server should return sorted/filtered specs and merge with items from state
	findUserMedia(queryParams: QueryParamsModel, UserMediaId: number): Observable<QueryResultsModel> {
		const url = API_LIST_URL + '/' + UserMediaId;
		const body = {
			state: queryParams
		};
		// return this.http.post<QueryResultsModel>(url, body);
		return this.http.get<QueryResultsModel>(url);

	}

	// UPDATE => PUT: update the product specification on the server
	updateUserMedia(UserMedia: UserMediaModel): Observable<any> {
		return this.http.put(API_UPDATE_URL, UserMedia);
	}

	// DELETE => delete the product specification from the server
	deleteUserMedia(UserMediaId: number): Observable<any> {
		const url = `${API_DELETE_URL}/${UserMediaId}`;
		return this.http.delete<UserMediaModel>(url);
	}

	deleteManyUserMedia(ids: number[] = []): Observable<any> {
		const body = { UserMediaIdsForDelete: ids };
        return this.http.post<QueryResultsModel>(API_DELETE_URL, body);
	}

	getSpecs(): string[] {

        return [];

		// return SPECIFICATIONS_DICTIONARY;
	}
}
