"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 2.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
from django.utils.translation import ugettext_lazy as _

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
from .local import *

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '4mz5-(4!-buvj$y#v16=h)khsafm-*3dd06@c5y4ofu#!ki1mv'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'grappelli',
    'grappelli_modeltranslation',
    'modeltranslation',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    'page',
    'account',
    'online',
    'settings',
    'easy_thumbnails',
    'image_cropping',
    'tinymce',
    'filebrowser',
    'django_celery_results',
    'django_celery_beat',
    'django_cleanup.apps.CleanupConfig',
    'chat',
    'webrtc',
    'rosetta',
    'trans',
    'props',
    'django_countries',
    'payment',
    'shop',
    'agency',
    'moderation',
    'gallery',
    'feed',
    'usermedia',
    'core',
    'authsocial',
    'oauth2_provider',
    'social_django',
    'rest_framework_social_oauth2',
    'django_extensions',
    'rest_framework_swagger',
    'webmaster',
    'django.contrib.admindocs',
    'administration',
    'logsys',
    'autogen',
    'blocklist',
    'django_filters',
    'likes',
    'menu',
    'mptt',
    'subscription',
    'userlist',
    'notifications',
    'testwogs',
    'taggit',
    'django_log_to_telegram',
    'search',
    'taggit_serializer',
    'post',
    'adminpanel'
]

from easy_thumbnails.conf import Settings as thumbnail_settings

THUMBNAIL_PROCESSORS = (
                           'image_cropping.thumbnail_processors.crop_corners',
                       ) + thumbnail_settings.THUMBNAIL_PROCESSORS
IMAGE_CROPPING_BACKEND = 'image_cropping.backends.easy_thumbs.EasyThumbnailsBackend'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.locale.LocaleMiddleware',
]

ROOT_URLCONF = 'backend.urls'

ADM_TPL_DIR = os.path.join(BASE_DIR, 'autogen', 'data')

TEMPLATES = [
    {

        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, '../../admin/templates'), ADM_TPL_DIR, os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'grappelli_extras.context_processors.extra_menus',
                'social_django.context_processors.backends',
                'social_django.context_processors.login_redirect',
                'django.template.context_processors.media',
                'adminpanel.context_processors.appruve_data'
            ],
            'builtins': [
                'autogen.templatetags.ng_filter'
            ]
        },
    },
]

EXTRA_MENUS = [
    {'menu': 'Reports', 'link': '#',

     'options': [

     ]

     },
]

WSGI_APPLICATION = 'backend.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

LOCALE_PATHS = (
    os.path.join(BASE_DIR, 'locale'),
)

ROSETTA_ENABLE_TRANSLATION_SUGGESTIONS = True
YANDEX_TRANSLATE_KEY = 'trnsl.1.1.20140521T130035Z.1014ae2799c685e3.97b1345108ab3a8520d96f730016a9dac947049b'
ROSETTA_MESSAGES_SOURCE_LANGUAGE_CODE = 'en'
ROSETTA_MESSAGES_SOURCE_LANGUAGE_NAME = 'English'

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

LANGUAGES = (
    ('ru', _('Russian')),
    ('en', _('English')),
)
MODELTRANSLATION_DEFAULT_LANGUAGE = 'en'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'

REST_FRAMEWORK = {
    # 'EXCEPTION_HANDLER': 'backend.rest_logger.handlers.rest_exception_handler',
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        # 'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework_social_oauth2.authentication.SocialAuthentication',
    ),
    'DEFAULT_PAGINATION_CLASS': 'backend.angular_paginator.AngularPagination',
    'PAGE_SIZE': 30,
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
    "DATE_INPUT_FORMATS": "%d-%m-%Y",
    'DATETIME_FORMAT': "%d-%m-%Y %H:%M:%S",
}
OAUTH2_PROVIDER = {
    'OAUTH2_BACKEND_CLASS': 'oauth2_provider.oauth2_backends.JSONOAuthLibCore',
}

import datetime

JWT_AUTH = {
    'JWT_ALLOW_REFRESH': True,
    'JWT_EXPIRATION_DELTA': datetime.timedelta(seconds=3600),
    'JWT_RESPONSE_PAYLOAD_HANDLER': 'account.views.custom_jwt_response',
}

CORS_ORIGIN_ALLOW_ALL = True

SESSION_ENGINE = 'redis_sessions.session'

REDIS_HOST = os.getenv('REDIS', 'localhost')
REDIS_PORT = int(os.getenv('REDIS_PORT', '6379'))

SESSION_REDIS = {
    'host': REDIS_HOST,
    'port': REDIS_PORT,
    'db': 3,
    'prefix': 'session',
    'socket_timeout': 1
}

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'
THUMBNAIL_QUALITY = 95

CELERY_BROKER_URL = 'redis://' + REDIS_HOST + ':' + str(REDIS_PORT)
CELERY_RESULT_BACKEND = 'redis://' + REDIS_HOST + ':' + str(REDIS_PORT)
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TASK_SERIALIZER = 'json'

GRAPPELLI_ADMIN_TITLE = 'Dating Club'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static")
]

GEOIP_PATH = os.path.join(BASE_DIR, "geodb")

GRAPH_MODELS = {
    'all_applications': True,
    'group_models': True,
}

# REST_FRAMEWORK = {
#    'EXCEPTION_HANDLER': 'core.rest_exeption.status_code_handler'
# }

LOGIN_URL = 'admin/login'
LOGOUT_URL = 'admin/logout'
LOGOUT_REDIRECT_URL = 'loginadmin'

SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTOCOL', 'https')

SSL_KEYS = {"certfile": '/home/webmaster/fullchain1.pem',
           "keyfile": '/home/webmaster/privkey1.pem'}

FFPROBE_PATH = 'ffprobe'

# GRAPPELLI_INDEX_DASHBOARD = {
#     'account.admin.superadmin_site': 'account.dashboard.SuperAdminDashboard',
#     'agency.admin.agency_site': 'agency.dashboard.AgencyDashboard',
#     'moderator.admin.moderator_site': 'moderator.dashboard.ModeratorAdminDashboard',
#     'webmaster.admin.webmaster_site': 'webmaster.dashboard.WebmasterAdminDashboard',
# }

OPENVIDU_SERVER_URL = 'https://neuraldating.com:4443'
OPENVIDU_SERVER_SECRET = 'SECRET'

SITE_GROUPS_ROLE = {
    'agency': ('agency-director', 'agency-manager'),
    'moderator': ('moderator',),
    'webmaster': ('webmaster',)
}

# ACCOUNT_AUTHENTICATION_METHOD = 'email'
# ACCOUNT_EMAIL_REQUIRED = True
# ACCOUNT_USERNAME_REQUIRED = False

TESTS_DOMAINS = {'local': 'http://localhost:8085/',
                 'dev': 'https://ng-dating-test.webmonstr.com/',
                 'prod': 'https://ng-dating-test.webmonstr.com/'}

TESTS_ACCOUNTS = {'man': {'login': 'man1@gmail.com', 'password': 'man1'},
                  'woman': {'login': 'woman1@gmail.com', 'password': '123457'},
                  'admin': {'login': 'admin', 'password': 'admin'}}

TESTS_DEFAULT = {'default_url': 'http://localhost:8085/',
                 'default_account': {'login': 'man1@gmail.com', 'password': 'man1'}}


FRONTEND_DIR = os.path.join(os.getcwd(),'..','..','frontend','src','app')
ADMIN_DIR = os.path.join(os.getcwd(),'..','admin')

# main bot - '1109931783:AAGsC2DnlEIlMTcGJ9y0zIhPugEaEeR1nEM'
LOG_TO_TELEGRAM_BOT_TOKEN = ""

# LOGGING = {
#     'disable_existing_loggers': True,
#     'filters': {
#         'require_debug_false': {
#             '()': 'django.utils.log.RequireDebugFalse'
#         }
#     },
#     'root': {
#         'level': 'WARNING',
#         'handlers': ['rest_logger_handler'],
#     },
#     'formatters': {
#         'verbose': {
#             'format': '%(levelname)s %(asctime)s %(module)s '
#                       '%(process)d %(thread)d %(message)s'
#         },
#     },
#     'handlers': {
#         'telegram_log': {
#             'level': 'ERROR',
#             'filters': ['require_debug_false'],
#             'class': 'django_log_to_telegram.log.AdminTelegramHandler',
#             'formatter': 'verbose',
#             'bot_token': LOG_TO_TELEGRAM_BOT_TOKEN,
#         },
#         'rest_logger_handler': {
#             'class': 'logging.StreamHandler',
#             'formatter': 'verbose'
#         },
#     },
#     'loggers': {
#         'django': {
#             'handlers': ['console', 'telegram_log'],
#             'propagate': True,
#         },
#         'django.request': {
#             'handlers': ['telegram_log', 'rest_logger_handler'],
#             'level': 'ERROR',
#             'propagate': True,
#         },
#         'django.db.backends': {
#             'level': 'ERROR',
#             'handlers': ['telegram_log', 'rest_logger_handler'],
#             'propagate': False,
#         },
#         'rest_logger': {
#             'handlers': ['console', 'telegram_log', 'rest_logger_handler'],
#             'propagate': False,
#         },
#     },
# }

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    # 'filters': {
    #     'require_debug_true': {
    #         '()': 'django.utils.log.RequireDebugTrue',
    #     },
    # },
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            #'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'telegram_log': {
            'level': 'ERROR',
            # 'filters': ['require_debug_false'],
            'class': 'django_log_to_telegram.log.AdminTelegramHandler',
            'formatter': 'verbose',
            'bot_token': LOG_TO_TELEGRAM_BOT_TOKEN,
        }
    },
    #  'telegram_log'
    'loggers': {
        'django': {
            'handlers': ['console'],
            'propagate': True,
        },
        'django.request': {
            'handlers': ['console'],
            'level': 'ERROR',
            'propagate': True,
        },
        # 'rest_logger': {
        #     'handlers': ['console', 'telegram_log', 'rest_logger_handler'],
        #     'propagate': False,
        # },
    }
}

#LOGGING_SETTINGS = os.getenv('LOGGING', 'LOGGING')
#DEFAULT_LOGGER = os.getenv('DEFAULT_LOGGER', 'rest_logger')

#LOGGER_EXCEPTION = DEFAULT_LOGGER
#LOGGER_ERROR = DEFAULT_LOGGER
#LOGGER_WARNING = DEFAULT_LOGGER
#LOGGER_INFO = DEFAULT_LOGGER
"""
   URl for adminpanel
"""
ADMIN_CMS_PANEL_URL = 'adminpanel/'